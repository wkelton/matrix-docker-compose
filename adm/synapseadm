#!/usr/bin/env python3

import click
import os
import requests
import subprocess


class SynapseConnection:
    def __init__(self, domain: str, port: int = None, protocol: str = 'https'):
        self.protocol = protocol
        self.domain = domain
        self.port = port
        self.access_token = None

    def fq_api_url(self, api: str):
        if self.port:
            return "{}://{}:{}{}".format(self.protocol, self.domain, self.port, api)
        return "{}://{}{}".format(self.protocol, self.domain, api)

    def get(self, api: str):
        return requests.get(self.fq_api_url(api), headers={"Authorization": "Bearer {}".format(self.access_token)})

    def post(self, api: str, data: str = None):
        return requests.post(self.fq_api_url(api), data=data,
            headers={"Authorization": "Bearer {}".format(self.access_token)})

    def login(self, user: str, password: str):
        if 'SYNAPSE_ACCESS_TOKEN' in os.environ:
            self.access_token = os.environ['SYNAPSE_ACCESS_TOKEN']
        else:
            response = requests.post(self.fq_api_url('/_matrix/client/r0/login'),
                data='{"type":"m.login.password", "user":"' + user + '", "password":"' + password + '"}')
            self.access_token = dict(response.json())['access_token']


class SynapseUsers:
    def __init__(self, synapse_connection: SynapseConnection):
        self.synapse_connection = synapse_connection

    def list_users(self):
        response = self.synapse_connection.get('/_synapse/admin/v2/users?guests=false')
        return [dict(raw)['name'] for raw in dict(response.json())['users']]


class SynapseRooms:
    def __init__(self, synapse_connection: SynapseConnection):
        self.synapse_connection = synapse_connection
        self.rooms = dict(self.synapse_connection.get('/_synapse/admin/v1/rooms').json())['rooms']

    def list_rooms(self):
        return self.rooms

    def media(self, room_id: str = None):
        rooms = self.rooms
        if room_id:
            rooms = [room for room in self.rooms if room['room_id'] == room_id]
        medias = {room['room_id']: dict(self.synapse_connection.get("/_synapse/admin/v1/room/{}/media".format(room['room_id'])).json()) for room in rooms}
        return medias


class SynapseNotices:
    def __init__(self, synapse_connection: SynapseConnection):
        self.synapse_connection = synapse_connection

    def send_notice(self, message: str, user: str = 'notices'):
        return self.synapse_connection.post('/_synapse/admin/v1/send_server_notice',
            '{"user_id": "@' + user + ':sagf.io", "content": {"msgtype": "m.text", "body": "' + message + '"}}').json()


@click.group()
@click.option('--admin', prompt='SYNAPSE_ACCESS_TOKEN' not in os.environ)
@click.option('--password', prompt='SYNAPSE_ACCESS_TOKEN' not in os.environ, hide_input=True)
@click.pass_context
def cli(ctx, admin: str, password: str):
    synapse_connection = SynapseConnection('matrix.sagf.io')
    synapse_connection.login(admin, password)
    ctx.obj= {
        'connection': synapse_connection,
        'users': SynapseUsers(synapse_connection),
        'rooms': SynapseRooms(synapse_connection),
        'notices': SynapseNotices(synapse_connection),
    }


@cli.command()
@click.pass_context
def shell(ctx):
    subprocess.run(["bash"], shell=True, env={**{'SYNAPSE_ACCESS_TOKEN': ctx.obj['connection'].access_token, 'PS1': "synapseadm $ "}, **os.environ})


@cli.command()
@click.pass_context
def version(ctx):
    print(ctx.obj['connection'].get('/_synapse/admin/v1/server_version').json())


@cli.command()
@click.pass_context
def token(ctx):
    print(ctx.obj['connection'].access_token)


@cli.command()
@click.pass_context
def users(ctx):
    print(ctx.obj['users'].list_users())


@cli.command()
@click.pass_context
def rooms(ctx):
    rooms = ctx.obj['rooms'].list_rooms()

    print("{} rooms:".format(len(rooms)))
    for room in rooms:
        print(room)


@cli.command()
@click.option('--room-id')
@click.pass_context
def media(ctx, room_id: str):
    medias = ctx.obj['rooms'].media(room_id)

    for room_id, media_info in medias.items():
        local_media = media_info['local']
        remote_media = media_info['remote']
        if len(local_media) + len(remote_media) > 0:
            print("{}:".format(room_id))
        for m in local_media:
            print(m)
        for m in remote_media:
            print(m)
        if len(local_media) + len(remote_media) > 0:
            print()


@cli.command()
@click.option('--user')
@click.argument("message")
@click.pass_context
def notice(ctx, user: str, message: str):
    notices = ctx.obj['notices']    

    if user:
        print(notices.send_notice(message, user))
    else:
        print(notices.send_notice(message))


if "__main__" == __name__:
    cli()

